package com.enlern.new_wsn.greendao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "WSN_NODE_BEAN".
*/
public class WsnNodeBeanDao extends AbstractDao<WsnNodeBean, Long> {

    public static final String TABLENAME = "WSN_NODE_BEAN";

    /**
     * Properties of entity WsnNodeBean.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Username = new Property(1, String.class, "username", false, "USERNAME");
        public final static Property Sys_board_num = new Property(2, String.class, "sys_board_num", false, "SYS_BOARD_NUM");
        public final static Property Chip_type = new Property(3, String.class, "chip_type", false, "CHIP_TYPE");
        public final static Property Node_name = new Property(4, String.class, "node_name", false, "NODE_NAME");
        public final static Property Node_wsn = new Property(5, String.class, "node_wsn", false, "NODE_WSN");
        public final static Property Node_data = new Property(6, String.class, "node_data", false, "NODE_DATA");
        public final static Property Insert_date = new Property(7, String.class, "insert_date", false, "INSERT_DATE");
        public final static Property Update_date = new Property(8, String.class, "update_date", false, "UPDATE_DATE");
        public final static Property Wsn_length = new Property(9, String.class, "wsn_length", false, "WSN_LENGTH");
        public final static Property Node_number = new Property(10, String.class, "node_number", false, "NODE_NUMBER");
        public final static Property Node_setting = new Property(11, String.class, "node_setting", false, "NODE_SETTING");
    }


    public WsnNodeBeanDao(DaoConfig config) {
        super(config);
    }
    
    public WsnNodeBeanDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"WSN_NODE_BEAN\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "\"USERNAME\" TEXT," + // 1: username
                "\"SYS_BOARD_NUM\" TEXT," + // 2: sys_board_num
                "\"CHIP_TYPE\" TEXT," + // 3: chip_type
                "\"NODE_NAME\" TEXT," + // 4: node_name
                "\"NODE_WSN\" TEXT," + // 5: node_wsn
                "\"NODE_DATA\" TEXT," + // 6: node_data
                "\"INSERT_DATE\" TEXT," + // 7: insert_date
                "\"UPDATE_DATE\" TEXT," + // 8: update_date
                "\"WSN_LENGTH\" TEXT," + // 9: wsn_length
                "\"NODE_NUMBER\" TEXT," + // 10: node_number
                "\"NODE_SETTING\" TEXT);"); // 11: node_setting
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"WSN_NODE_BEAN\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, WsnNodeBean entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String username = entity.getUsername();
        if (username != null) {
            stmt.bindString(2, username);
        }
 
        String sys_board_num = entity.getSys_board_num();
        if (sys_board_num != null) {
            stmt.bindString(3, sys_board_num);
        }
 
        String chip_type = entity.getChip_type();
        if (chip_type != null) {
            stmt.bindString(4, chip_type);
        }
 
        String node_name = entity.getNode_name();
        if (node_name != null) {
            stmt.bindString(5, node_name);
        }
 
        String node_wsn = entity.getNode_wsn();
        if (node_wsn != null) {
            stmt.bindString(6, node_wsn);
        }
 
        String node_data = entity.getNode_data();
        if (node_data != null) {
            stmt.bindString(7, node_data);
        }
 
        String insert_date = entity.getInsert_date();
        if (insert_date != null) {
            stmt.bindString(8, insert_date);
        }
 
        String update_date = entity.getUpdate_date();
        if (update_date != null) {
            stmt.bindString(9, update_date);
        }
 
        String wsn_length = entity.getWsn_length();
        if (wsn_length != null) {
            stmt.bindString(10, wsn_length);
        }
 
        String node_number = entity.getNode_number();
        if (node_number != null) {
            stmt.bindString(11, node_number);
        }
 
        String node_setting = entity.getNode_setting();
        if (node_setting != null) {
            stmt.bindString(12, node_setting);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, WsnNodeBean entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String username = entity.getUsername();
        if (username != null) {
            stmt.bindString(2, username);
        }
 
        String sys_board_num = entity.getSys_board_num();
        if (sys_board_num != null) {
            stmt.bindString(3, sys_board_num);
        }
 
        String chip_type = entity.getChip_type();
        if (chip_type != null) {
            stmt.bindString(4, chip_type);
        }
 
        String node_name = entity.getNode_name();
        if (node_name != null) {
            stmt.bindString(5, node_name);
        }
 
        String node_wsn = entity.getNode_wsn();
        if (node_wsn != null) {
            stmt.bindString(6, node_wsn);
        }
 
        String node_data = entity.getNode_data();
        if (node_data != null) {
            stmt.bindString(7, node_data);
        }
 
        String insert_date = entity.getInsert_date();
        if (insert_date != null) {
            stmt.bindString(8, insert_date);
        }
 
        String update_date = entity.getUpdate_date();
        if (update_date != null) {
            stmt.bindString(9, update_date);
        }
 
        String wsn_length = entity.getWsn_length();
        if (wsn_length != null) {
            stmt.bindString(10, wsn_length);
        }
 
        String node_number = entity.getNode_number();
        if (node_number != null) {
            stmt.bindString(11, node_number);
        }
 
        String node_setting = entity.getNode_setting();
        if (node_setting != null) {
            stmt.bindString(12, node_setting);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public WsnNodeBean readEntity(Cursor cursor, int offset) {
        WsnNodeBean entity = new WsnNodeBean( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // username
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // sys_board_num
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // chip_type
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // node_name
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // node_wsn
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // node_data
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // insert_date
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // update_date
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9), // wsn_length
            cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10), // node_number
            cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11) // node_setting
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, WsnNodeBean entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setUsername(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setSys_board_num(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setChip_type(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setNode_name(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setNode_wsn(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setNode_data(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setInsert_date(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setUpdate_date(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setWsn_length(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
        entity.setNode_number(cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10));
        entity.setNode_setting(cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(WsnNodeBean entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(WsnNodeBean entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(WsnNodeBean entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
